echo

if [ -d BOOT-EXTRACTED ]
then
  echo Found BOOT-EXTRACTED folder, checking contents ...

  if [ -d BOOT-EXTRACTED/boot.img-ramdisk ]
  then
    echo Found boot.img-ramdisk

    if [ -e BOOT-EXTRACTED/boot.img-ramdisk.cpio.gz ]
    then
      echo Found boot.img-ramdisk.cpio.gz

      if [ -e BOOT-EXTRACTED/boot.img-kernel ]
      then
        echo Found boot.img-kernel
      else
        echo Did not find BOOT-EXTRACTED/boot.img-kernel
        exit 0
      fi

    else
      echo Did not find BOOT-EXTRACTED/boot.img-ramdisk.cpio.gz!  
      exit 0
    fi

  else
    echo Did not find boot-extracted/boot.img-ramdisk folder!
    exit 0
  fi

else
  echo Did not find BOOT-EXTRACTED folder!
  exit 0
fi



#
# Perform mkboot* operations
#


if [ `uname | grep CYGWIN` ]
then
  mkbootfs_file=mkbootfs.exe
  mkbootimg_file=mkbootimg.exe

else
  mkbootfs_file=mkbootfs
  mkbootimg_file=mkbootimg
fi


if [ -e tools/mkboot/$mkbootfs_file ]
then
  echo "Found $mkbootfs_file"
else
  echo
  echo "Compiling mkbootfs ..."
  cd tools/mkboot
  gcc -o mkbootfs mkbootfs.c
  cd ../..

  if [ -e tools/mkboot/$mkbootfs_file ]
  then
    echo mkbootfs successfully compiled
  else
    echo "Error: mkbootfs not successfully compiled!"
    exit 0   
  fi
fi

if [ -e tools/mkboot/$mkbootimg_file ]
then
  echo "Found $mkbootimg_file"
else
  echo
  echo "Compiling mkbootimg ..."
  cd tools/mkboot
  gcc -c rsa.c
  gcc -c sha.c
  gcc rsa.o sha.o mkbootimg.c -w -o mkbootimg
  rm *.o
  cd ../..

  if [ -e tools/mkboot/$mkbootimg_file ]
  then
    echo mkbootimg successfully compiled
  else
    echo "Error: mkbootimg not successfully compiled!"
    exit 0
  fi    
fi

cp tools/mkboot/$mkbootfs_file BOOT-EXTRACTED/
cp tools/mkboot/$mkbootimg_file BOOT-EXTRACTED/
cd BOOT-EXTRACTED
echo 
echo Building ramdisk-boot ...
./$mkbootfs_file boot.img-ramdisk | gzip > ramdisk-boot



cd ..
echo

if [ -d WORKING_* ]
then
  echo Working folder found
else
  echo Working folder not found!
  exit 0
fi


cd WORKING_*

if [ -e boot.img ] 
then

  echo "Attempting to determine kernel base address ..."

  base_temp=`echo \`od -A n -h -j 34 -N 2 boot.img\` | sed 's/ //g'`
  zeros=0000
  base=0x$base_temp$zeros

  echo "Using base address of $base"

  echo "Attempting to determine command line parameter ..."
  cmd_line=`od -A n --strings -j 64 -N 512 boot.img`

  if [ "$cmd_line" == "" ]
  then
    echo "No cmdline found"
  else
    echo "Using cmdline: $cmd_line"
  fi    

  cd ..

else
  echo "boot.img not found under working folder!"
  cd ..
  exit 0
fi

cd BOOT-EXTRACTED

echo
echo Building newBoot.img ...

./$mkbootimg_file --kernel boot.img-kernel --ramdisk ramdisk-boot --cmdline "$cmd_line" -o newBoot.img --base $base

rm $mkbootfs_file
rm $mkbootimg_file


if [ -e newBoot.img ]
then
  echo
  echo newBoot.img created

  echo Copying as boot.img to working folder
  cd ../WORKING_*
  cp ../BOOT-EXTRACTED/newBoot.img boot.img
  cd ..
    
  echo
  echo "Removing BOOT-EXTRACTED folder ..."
  rm -rf BOOT-EXTRACTED

else
  echo
  echo newBoot.img not created!
  exit 0
fi

cd ..
